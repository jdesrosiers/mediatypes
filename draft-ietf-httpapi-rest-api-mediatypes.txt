



HTTPAPI                                                         R. Polli
Internet-Draft     Digital Transformation Department, Italian Government
Intended status: Informational                           27 January 2022
Expires: 31 July 2022


                          REST API Media Types
             draft-ietf-httpapi-rest-api-mediatypes-latest

Abstract

   This document registers the following media types used in APIs on the
   IANA Media Types registry: application/yaml, application/
   openapi+json, and application/openapi+yaml.

Note to Readers

   _RFC EDITOR: please remove this section before publication_

   Discussion of this draft takes place on the HTTP APIs working group
   mailing list (httpapi@ietf.org), which is archived at
   https://mailarchive.ietf.org/arch/browse/httpapi/
   (https://mailarchive.ietf.org/arch/browse/httpapi/).

   The source code and issues list for this draft can be found at
   https://github.com/ioggstream/draft-polli-rest-api-mediatypes
   (https://github.com/ioggstream/draft-polli-rest-api-mediatypes).

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 31 July 2022.







Polli                     Expires 31 July 2022                  [Page 1]

Internet-Draft            REST API Media Types              January 2022


Copyright Notice

   Copyright (c) 2022 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Notational Conventions  . . . . . . . . . . . . . . . . .   3
   2.  Media Type registrations  . . . . . . . . . . . . . . . . . .   3
     2.1.  Media Type application/yaml . . . . . . . . . . . . . . .   3
     2.2.  The OpenAPI Media Types . . . . . . . . . . . . . . . . .   4
       2.2.1.  Media Type application/openapi+json . . . . . . . . .   4
       2.2.2.  Media Type application/openapi+yaml . . . . . . . . .   5
   3.  Security Considerations . . . . . . . . . . . . . . . . . . .   6
     3.1.  YAML media types  . . . . . . . . . . . . . . . . . . . .   6
       3.1.1.  YAML and JSON . . . . . . . . . . . . . . . . . . . .   7
       3.1.2.  Arbitrary code execution  . . . . . . . . . . . . . .   7
       3.1.3.  Resource exhaustion . . . . . . . . . . . . . . . . .   7
   4.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   8
   5.  Normative References  . . . . . . . . . . . . . . . . . . . .   8
   Appendix A.  Acknowledgements . . . . . . . . . . . . . . . . . .   9
   FAQ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   9
   Change Log  . . . . . . . . . . . . . . . . . . . . . . . . . . .   9
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .   9

1.  Introduction

   OpenAPI Specification [oas] version 3 and above is a consolidated
   standard for describing HTTP APIs using the JSON [JSON] and yaml
   [yaml] data format.

   To increase interoperability when processing API specifications and
   leverage content negotiation mechanisms when exchanging OpenAPI
   Specification resources this specification register the following
   media-types: application/yaml, application/openapi+json and
   application/openapi+yaml.





Polli                     Expires 31 July 2022                  [Page 2]

Internet-Draft            REST API Media Types              January 2022


1.1.  Notational Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.  These words may also appear in this
   document in lower case as plain English words, absent their normative
   meanings.

   This document uses the Augmented BNF defined in [RFC5234] and updated
   by [RFC7405].

2.  Media Type registrations

   This section describes the information required to register the above
   media types.

2.1.  Media Type application/yaml

   The following information serves as the registration form for the
   application/yaml media type.

   Type name: application

   Subtype name: yaml

   Required parameters: None

   Optional parameters: None; unrecognized parameters should be ignored

   Encoding considerations: Same as [JSON]

   Security considerations: see Section 3 of this document

   Interoperability considerations: None

   Published specification: (this document)

   Applications that use this media type: HTTP

   Fragment identifier considerations: Same as for application/json
   [JSON]

   Additional information:

   Deprecated alias names for this type: application/x-yaml, text/yaml,
   text/x-yaml



Polli                     Expires 31 July 2022                  [Page 3]

Internet-Draft            REST API Media Types              January 2022


   Magic number(s): n/a

   File extension(s): yaml, yml

   Macintosh file type code(s): n/a

   Person and email address to contact for further information: See
   Authors' Addresses section.

   Intended usage: COMMON

   Restrictions on usage: None.

   Author: See Authors' Addresses section.

   Change controller: n/a

2.2.  The OpenAPI Media Types

   The OpenAPI Specification Media Types convey OpenAPI document (OAS)
   files as defined in [oas] for version 3.0.0 and above.

   Those files can be serialized in [JSON] or [yaml].  Since there are
   multiple OpenAPI Specification versions, those media-types support
   the version parameter.

   The following examples conveys the desire of a client to receive an
   OpenAPI Specification resource preferably in the following order:

   1.  openapi 3.1 in yaml

   2.  openapi 3.0 in yaml

   3.  any openapi version in json

   Accept: application/openapi+yaml;version=3.1,
           application/openapi+yaml;version=3.0;q=0.5,
           application/openapi+json;q=0.3

2.2.1.  Media Type application/openapi+json

   The following information serves as the registration form for the
   application/openapi+json media type.

   Type name: application

   Subtype name: openapi+json




Polli                     Expires 31 July 2022                  [Page 4]

Internet-Draft            REST API Media Types              January 2022


   Required parameters: None

   Optional parameters: version; unrecognized parameters should be
   ignored

   Encoding considerations: Same as [JSON]

   Security considerations: see Section 3 of this document

   Interoperability considerations: None

   Published specification: (this document)

   Applications that use this media type: HTTP

   Fragment identifier considerations: Same as for application/json
   [JSON]

   Additional information:

   Deprecated alias names for this type: n/a

   Magic number(s): n/a

   File extension(s): json

   Macintosh file type code(s): n/a

   Person and email address to contact for further information: See
   Authors' Addresses section.

   Intended usage: COMMON

   Restrictions on usage: None.

   Author: See Authors' Addresses section.

   Change controller: n/a

2.2.2.  Media Type application/openapi+yaml

   The following information serves as the registration form for the
   application/openapi+yaml media type.

   Type name: application

   Subtype name: openapi+yaml




Polli                     Expires 31 July 2022                  [Page 5]

Internet-Draft            REST API Media Types              January 2022


   Required parameters: None

   Optional parameters: version; unrecognized parameters should be
   ignored

   Encoding considerations: Same as [JSON]

   Security considerations: see Section 3 of this document

   Interoperability considerations: None

   Published specification: (this document)

   Applications that use this media type: HTTP

   Fragment identifier considerations: Same as for application/json
   [JSON]

   Additional information:

   Deprecated alias names for this type: n/a

   Magic number(s): n/a

   File extension(s): yaml, yml

   Macintosh file type code(s): n/a

   Person and email address to contact for further information: See
   Authors' Addresses section

   Intended usage: COMMON

   Restrictions on usage: None.

   Author: See Authors' Addresses section

   Change controller: n/a

3.  Security Considerations

   Security requirements for both media type and media type suffix
   registrations are discussed in Section 4.6 of [MEDIATYPE].

3.1.  YAML media types






Polli                     Expires 31 July 2022                  [Page 6]

Internet-Draft            REST API Media Types              January 2022


3.1.1.  YAML and JSON

   Since YAML [yaml] is a superset of JSON [JSON], the same security
   considerations apply when using that syntax.  It is important to note
   though, that when serializing a YAML document in JSON, information
   can be discarded: this includes comments and references that do not
   have a JSON counterpart.

   Implementers interested in using YAML as a more efficient format to
   serialize information intented to be consumed in JSON, needs to
   ensure that relevant information will not be lost during the
   processing, and might want to use a restricted YAML profile.

3.1.2.  Arbitrary code execution

   YAML has some features like explicit typing (e.g. !!str) and local
   tags that, depending on the implementation, might trigger unexpected
   code execution.

   document = "!!python/object/apply:os.system ['echo boom!']"
   yaml.unsafe_load(document)
   # boom!

   Code execution in deserializers should be disabled by default, and
   only be enabled explicitly.  In those cases, the implementation
   should ensure - for example, via specific functions - that code
   execution would result to strictly bounded time/memory limits.

   Many implementations provide safe deserializers addressing these
   issues (e.g the yaml.safe_load function in pyyaml, ...).

3.1.3.  Resource exhaustion

   YAML documents may contain reference cycles, so they can't be treated
   as tree structures.  An implementation that attempts to treat a
   cyclic document as a tree structure may infinite-loop at some point
   (e.g. when trying to serialize a YAML document in JSON).

   x: &x
     y: *x

                        Figure 1: A cyclic document

   Even if a document is not cyclic, treating it as a tree may lead to
   improper behavior (such as the "billion laughs" problem).






Polli                     Expires 31 July 2022                  [Page 7]

Internet-Draft            REST API Media Types              January 2022


   x1: &a1 ["a", "a"]
   x2: &a2 [*a1, *a1]
   x3: &a3 [*a2, *a2]

                    Figure 2: A billion laughs document

   This can be addressed using processors limiting the anchor recursion
   depth and validating the input before processing it; even in these
   cases it is important to carefully test the implementation you are
   going to use.  The same considerations apply when serializing a YAML
   object in a format that do not support reference cycles (see
   Section 3.1.1).

4.  IANA Considerations

   This specification defines the following new Internet media types
   [MEDIATYPE].

   IANA has updated the "Media Types" registry at
   https://www.iana.org/assignments/media-types
   (https://www.iana.org/assignments/media-types) with the registration
   information provided below.

          +==========================+==========================+
          | Media Type               | Section                  |
          +==========================+==========================+
          | application/yaml         | Section 2.1 of ThisRFC   |
          +--------------------------+--------------------------+
          | application/openapi+yaml | Section 2.2.2 of ThisRFC |
          +--------------------------+--------------------------+
          | application/openapi+json | Section 2.2.1 of ThisRFC |
          +--------------------------+--------------------------+

                                  Table 1

5.  Normative References

   [JSON]     Bray, T., Ed., "The JavaScript Object Notation (JSON) Data
              Interchange Format", STD 90, RFC 8259,
              DOI 10.17487/RFC8259, December 2017,
              <https://www.rfc-editor.org/info/rfc8259>.

   [MEDIATYPE]
              Freed, N., Klensin, J., and T. Hansen, "Media Type
              Specifications and Registration Procedures", BCP 13,
              RFC 6838, DOI 10.17487/RFC6838, January 2013,
              <https://www.rfc-editor.org/info/rfc6838>.




Polli                     Expires 31 July 2022                  [Page 8]

Internet-Draft            REST API Media Types              January 2022


   [oas]      Darrel Miller, ., Jeremy Whitlock, ., Marsh Gardiner, .,
              Mike Ralphson, ., Ron Ratovsky, ., and . Uri Sarid,
              "OpenAPI Specification 3.0.0", 26 July 2017.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC5234]  Crocker, D., Ed. and P. Overell, "Augmented BNF for Syntax
              Specifications: ABNF", STD 68, RFC 5234,
              DOI 10.17487/RFC5234, January 2008,
              <https://www.rfc-editor.org/info/rfc5234>.

   [RFC7405]  Kyzivat, P., "Case-Sensitive String Support in ABNF",
              RFC 7405, DOI 10.17487/RFC7405, December 2014,
              <https://www.rfc-editor.org/info/rfc7405>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

   [yaml]     Oren Ben-Kiki, ., Clark Evans, ., and . Ingy doet Net,
              "YAML Ain’t Markup Language Version 1.2", 1 October 2002,
              <https://yaml.org/spec/1.2/spec.html>.

Appendix A.  Acknowledgements

   Thanks to Erik Wilde and David Biesack for being the initial
   contributors of this specification, and to Darrel Miller and Rich
   Salz for their support during the adoption phase.

   In addition to the people above, this document owes a lot to the
   extensive discussion inside and outside the HTTPAPI workgroup,
   including Eemeli Aro and Ingy doet Net.

FAQ

   Q: Why this document?  After all these years, we still lack a proper
      media-type for yaml.  This has some security implications too (eg.
      wrt on identifying parsers or treat downloads)

Change Log

   RFC EDITOR PLEASE DELETE THIS SECTION.

Author's Address




Polli                     Expires 31 July 2022                  [Page 9]

Internet-Draft            REST API Media Types              January 2022


   Roberto Polli
   Digital Transformation Department, Italian Government
   Italy

   Email: robipolli@gmail.com














































Polli                     Expires 31 July 2022                 [Page 10]
